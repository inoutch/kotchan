allprojects {
    version "0.2.3"
    group "io.github.inoutch"
}

buildscript {
    ext.kotlin_version = "1.3.21"
    ext.lwjgl_version = "3.2.1"

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.android.tools.build:gradle:3.3.2"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: "maven-publish"

repositories {
    google()
    jcenter()
}

import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjgl_natives = "natives-windows"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjgl_natives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjgl_natives = "natives-macos"
        break
}

def platform = OperatingSystem.current()
switch (platform) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjgl_natives = "natives-windows"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjgl_natives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjgl_natives = "natives-macos"
        break
}

kotlin {
    targets {
        fromPreset(presets.iosArm64, "ios") {
            compilations.main {
                cinterops {
                    vulkan {
                        includeDirs "${System.getenv()["VULKAN_SDK"]}/MoltenVK/include"
                        extraOpts "-include-binary"
                    }
                    kmvk {
                        includeDirs "./native/MVKView/build/Release/include"
                        extraOpts "-include-binary"
                    }
                }
            }
        }
        fromPreset(presets.jvm, "jvm")
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"

                implementation "org.lwjgl:lwjgl:$lwjgl_version"
                implementation "org.lwjgl:lwjgl:$lwjgl_version:$lwjgl_natives"
                implementation "org.lwjgl:lwjgl-stb:$lwjgl_version"
                implementation "org.lwjgl:lwjgl-stb:$lwjgl_version:$lwjgl_natives"
                implementation "org.lwjgl:lwjgl-glfw:$lwjgl_version"
                implementation "org.lwjgl:lwjgl-glfw:$lwjgl_version:$lwjgl_natives"
                implementation "org.lwjgl:lwjgl-vulkan:$lwjgl_version"
                if (platform == OperatingSystem.MAC_OS) {
                    implementation "org.lwjgl:lwjgl-vulkan:$lwjgl_version:$lwjgl_natives"
                }
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }
    }
}

// HACK: https://github.com/JetBrains/kotlin-native/issues/2314
task copyNativeLibs(type: Copy) {
    from "${System.getenv()["VULKAN_SDK"]}/MoltenVK"
    into "build/externals/MoltenVK"
}

cinteropVulkanIos.dependsOn copyNativeLibs

def repo = new File(rootDir, "repository")
publishing.repositories.maven {
    url "file://${repo.absolutePath}"
}
