plugins {
    id "kotlin-multiplatform"
    id "kotlinx-serialization"
    id "com.android.application"
    id "kotlin-android-extensions"
}

def extraJvmArgs = ""
def mainClassName = "io.github.inoutch.kotchan.example.MainKt"

// jvm
def platform = org.gradle.internal.os.OperatingSystem.current()
switch (platform) {
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        extraJvmArgs = ["-XstartOnFirstThread"]
        break
}

kotlin {
    jvm()
    iosArm64('ios') {
        binaries.executable {
            entryPoint = "io.github.inoutch.kotchan.example.main"
        }
    }
    android()
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializationVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutineVersion"

                implementation project(":kotchan")
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

                implementation project(":kotchan")

                runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
                if (platform == org.gradle.internal.os.OperatingSystem.MAC_OS) {
                    runtimeOnly "org.lwjgl:lwjgl-vulkan:$lwjglVersion:$lwjglNatives"
                }
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serializationVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutineVersion"

                implementation project(":kotchan")
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializationVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutineVersion"

                implementation project(":kotchan")
            }
        }
        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"
                implementation "com.android.support.constraint:constraint-layout:1.1.3"

                implementation project(":kotchan")
            }
        }
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
        versionName "1.0"
    }

    packagingOptions {
        exclude "META-INF/*.kotlin_module"
    }

    buildTypes {
        release {
            minifyEnabled true
            matchingFallbacks = ['release', 'debug']
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            matchingFallbacks = ['release', 'debug']
        }
    }

    sourceSets.main {
        assets.srcDirs += "src/commonMain/resources"
    }
}

task fatJar(type: Jar) {
    baseName = "${project.name}-all"
    manifest { attributes "Main-Class": mainClassName }
    from { kotlin.jvm().compilations.main.runtimeDependencyFiles.collect { it.isDirectory() ? it : zipTree(it) } }
    with jvmJar
}

task runJvm(type: JavaExec) {
    classpath = kotlin.targets.jvm.compilations.test.runtimeDependencyFiles
    main = mainClassName
    jvmArgs extraJvmArgs
}

task buildAppForXcode {
    if (isCalledFromXcode()) {
        dependsOn kotlin.targets.ios.binaries.getExecutable(getBuildTypeForXcode()).linkTask
    }

    doLast {
        if (!isCalledFromXcode()) {
            throw new Exception("Please run 'buildAppForXcode' task with all necessary properties!")
        }

        copy {
            from file(kotlin.targets.ios.binaries.getExecutable(getBuildTypeForXcode()).outputFile)
            into file(getBinaryLocationForXcode().parentFile)
            rename {
                getBinaryLocationForXcode().name
            }
        }
    }
}

private boolean isCalledFromXcode() {
    project.hasProperty("configuration.name") && project.hasProperty("binary.location")
}

private String getBuildTypeForXcode() {
    project.properties["configuration.name"] as String
}

private File getBinaryLocationForXcode() {
    file(project.properties["binary.location"])
}
